<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Alternative_Description" xml:space="preserve">
    <value>Sub-Genres: Alternative Rock • College Rock • Experimental Rock • Goth Rock • Grunge • Hardcore Punk • Hard Rock • Indie Rock • New Wave • Progressive Rock • Punk • Shoegaze • Steampunk</value>
  </data>
  <data name="Alternative_Name" xml:space="preserve">
    <value>Alternative</value>
  </data>
  <data name="Blues_Description" xml:space="preserve">
    <value>Sub-Genres: Acoustic Blues • Chicago Blues • Classic Blues • Contemporary Blues • Country Blues • Delta Blues • Electric Blues</value>
  </data>
  <data name="Blues_Name" xml:space="preserve">
    <value>Blues</value>
  </data>
  <data name="Childrens_Description" xml:space="preserve">
    <value>Sub-Genres: Lullabies • Sing-Along • Stories</value>
  </data>
  <data name="Childrens_Name" xml:space="preserve">
    <value>Children</value>
  </data>
  <data name="Christian_Description" xml:space="preserve">
    <value>Sub-Genres: CCM • Christian Metal • Christian Pop • Christian Rap • Christian Rock • Classic Christian • Contemporary Gospel • Gospel • Christian &amp; Gospel • Praise &amp; Worship • Qawwali • Southern Gospel • Traditional Gospel</value>
  </data>
  <data name="Christian_Name" xml:space="preserve">
    <value>Christian</value>
  </data>
  <data name="Classical_Description" xml:space="preserve">
    <value>Sub-Genres: Avant-Garde • Baroque • Chamber Music • Chant • Choral • Classical Crossover • Early Music • High Classical • Impressionist • Medieval • Minimalism • Modern Composition • Opera • Orchestral • Renaissance • Romantic • Wedding Music</value>
  </data>
  <data name="Classical_Name" xml:space="preserve">
    <value>Classical</value>
  </data>
  <data name="Country_Description" xml:space="preserve">
    <value>Sub-Genres: Alternative Country • Americana • Bluegrass • Contemporary Bluegrass • Contemporary Country • Country Gospel • Honky Tonk • Outlaw Country • Traditional Bluegrass • Traditional Country • Urban Cowboy</value>
  </data>
  <data name="Country_Name" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Electronic_Description" xml:space="preserve">
    <value>Sub-Genres: Breakbeat • Dubstep • Exercise • Garage • Hardcore • Hard Dance • Hi-NRG / Eurodance • House • Jackin House • Jungle • Drum N Bass • Techno • Trance</value>
  </data>
  <data name="Electronic_Name" xml:space="preserve">
    <value>Electronic</value>
  </data>
  <data name="Folk_Description" xml:space="preserve">
    <value>Sub-Genres: Folk metal • Folk rock • Neo-Folk • Anti-folk • Indie Folk • Folk Punk • Contemporary Folk • Progressive Folk • Folk Country • Psychedelic Folk • Americana • Skiffle • Ballads</value>
  </data>
  <data name="Folk_Name" xml:space="preserve">
    <value>Folk</value>
  </data>
  <data name="HipHopRap_Description" xml:space="preserve">
    <value>Sub-Genres: Alternative Rap • Bounce • Dirty South • East Coast Rap • Gangsta Rap • Hardcore Rap • Hip-Hop • Latin Rap • Old School Rap • Rap • Underground Rap • West Coast Rap • Mumble Rap</value>
  </data>
  <data name="HipHopRap_Name" xml:space="preserve">
    <value>Hip-Hop/Rap</value>
  </data>
  <data name="Jazz_Description" xml:space="preserve">
    <value>Sub-Genres: Acid Jazz • Avant-Garde Jazz • Big Band • Blue Note • Contemporary Jazz • Easy Listening • Crossover Jazz • Dixieland • Ethio-Jazz Fusion • Hard Bop • Latin Jazz • Mainstream Jazz • Ragtime • Smooth Jazz • Trad Jazz</value>
  </data>
  <data name="Jazz_Name" xml:space="preserve">
    <value>Jazz</value>
  </data>
  <data name="Latino_Description" xml:space="preserve">
    <value>Sub-Genres: Alternativo &amp; Rock Latino • Baladas y Boleros • Brazilian • Contemporary Latin • Latin Jazz • Pop Latino • Raíces • Reggaeton y Hip-Hop • Regional Mexicano • Salsa • Tropical • Bachata • Rumba • Tango</value>
  </data>
  <data name="Latino_Name" xml:space="preserve">
    <value>Latino</value>
  </data>
  <data name="NewAge_Description" xml:space="preserve">
    <value>Sub-Genres: Environmental • Healing • Meditation • Nature • Relaxation • Travel</value>
  </data>
  <data name="NewAge_Name" xml:space="preserve">
    <value>New Age</value>
  </data>
  <data name="Pop_Description" xml:space="preserve">
    <value>Sub-Genres: Baroque Pop • Country Pop • Contemporary R&amp;B • Cowboy Pop • Dancehall Pop • Electropop •emo Pop • Folk-Pop • Hip-Pop • Indie Pop • Pop Punk • Pop Rap • Ambient Pop • Pop Rock • Power Pop • Psychedelic Pop • Space Age Pop • Worldbeat • K Pop</value>
  </data>
  <data name="Pop_Name" xml:space="preserve">
    <value>Pop</value>
  </data>
  <data name="RB_Description" xml:space="preserve">
    <value>Sub-Genres: Contemporary R&amp;B • Disco • Doo Wop • Funk • Motown • Neo-Soul • Quiet Storm • Soul</value>
  </data>
  <data name="RB_Name" xml:space="preserve">
    <value>R&amp;B</value>
  </data>
  <data name="Reggae_Description" xml:space="preserve">
    <value>Sub-Genres: Dancehall • Dub • Roots Reggae • Ska • Mento • Reggaestep • Gospel Reggae • Contemporary Reggae</value>
  </data>
  <data name="Reggae_Name" xml:space="preserve">
    <value>Reggae</value>
  </data>
  <data name="Rock_Description" xml:space="preserve">
    <value>Sub-Genres: Adult Alternative • American Rock • Arena Rock • Blues-Rock • British Invasion • Death Metal/Black Metal • Glam Rock • Hair Metal • Hard Rock ! Metal • Jam Bands • Prog-Rock/Art Rock • Psychedelic • Rock &amp; Roll • Rockabilly • Roots Rock • Singer/Songwriter • Classic Rock • Southern Rock</value>
  </data>
  <data name="Rock_Name" xml:space="preserve">
    <value>Rock</value>
  </data>
</root>