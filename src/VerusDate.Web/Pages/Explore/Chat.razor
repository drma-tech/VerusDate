@page "/Explore/Chat/{IdUserView}"
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@attribute [Authorize]
@inherits PageCore<Explore.Chat>

<Row>
    <Column ColumnSize="ColumnSize.Is7.OnDesktop.Is6.OnFullHD">
        <Card Margin="Margin.Is3.FromBottom">
            <CardHeader>Conversa com @view?.Basic.NickName</CardHeader>
            <CardBody Padding="Padding.Is0.FromBottom" Style="height: 265px; overflow: auto; display: flex; flex-direction: column-reverse;">

                @if (Options.HasCustomVisibility)
                {
                    <CustomVisibility Options="Options"></CustomVisibility>
                }
                else
                {
                    @foreach (var item in chat.Itens.OrderByDescending(o => o.DtMessage))
                    {
                        if (item.IdUserSender == ComponenteUtils.IdUser) //usuário logado como sender
                        {
                            <Row Padding="Padding.Is2.FromBottom.Is2.FromTop">
                                <Column ColumnSize="ColumnSize.Is9.Is1.WithOffset">
                                    <Alert Color="Color.Secondary" Visible="true" Padding="Padding.Is2" Margin="Margin.Is0.FromBottom">
                                        <Badge Float="Float.Start">Eu</Badge>
                                        <Badge Float="Float.End"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item.DtMessage.GetElapsedTime()</Badge>
                                        <br />
                                        @if (item.TypeContent == TypeContent.Message)
                                        {
                                            <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                                @item.Content
                                            </Paragraph>
                                        }
                                        else
                                        {
                                            <span>item inválido</span>
                                        }
                                    </Alert>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2">
                                    <Figure Margin="Margin.Is0" Size="FigureSize.Is48x48" Float="Float.End">
                                        <FigureImage Source="@user.GetMainPhoto()" Rounded="true" AlternateText="No User" />
                                    </Figure>
                                </Column>
                            </Row>
                        }
                        else
                        {
                            <Row Padding="Padding.Is2.FromBottom.Is2.FromTop">
                                <Column ColumnSize="ColumnSize.Is2">
                                    <Figure Margin="Margin.Is0" Size="FigureSize.Is48x48" Float="Float.Start">
                                        <FigureImage Source="@view.GetMainPhoto()" Rounded="true" AlternateText="No User" />
                                    </Figure>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is9">
                                    <Alert Color="Color.Success" Visible="true" Padding="Padding.Is2" Margin="Margin.Is0.FromBottom">
                                        <Badge Float="Float.Start">@view.Basic.NickName</Badge>
                                        <Badge Float="Float.End"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item.DtMessage.GetElapsedTime()</Badge>
                                        <br />
                                        @if (item.TypeContent == TypeContent.Message)
                                        {
                                            <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                                @item.Content
                                            </Paragraph>
                                        }
                                        else
                                        {
                                            <span>item inválido</span>
                                        }
                                    </Alert>
                                </Column>
                            </Row>
                        }
                    }
                }
            </CardBody>
            <CardBody Padding="Padding.Is0.FromBottom">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <MemoEdit Rows="2" @bind-Text="Message" Placeholder="Para sua própria segurança, favor não incluir seu nome completo, endereço, celular, email ou quaisquer informações pessoais"></MemoEdit>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="SendPrivateMessage" Disabled="@BtnDisabled">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Share"></Blazorise.Icon>
                        </Button>
                    </Addon>
                </Addons>
            </CardBody>
            <CardBody>
                <Button Color="Color.Primary" Disabled="true" title="Enviar Áudio">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MicrophoneAlt"></Blazorise.Icon>
                </Button>
                <Button Color="Color.Primary" Disabled="true" title="Enviar Imagem">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Images"></Blazorise.Icon>
                </Button>
                <Button Color="Color.Primary" Disabled="true" title="Enviar Celular">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MobileAlt"></Blazorise.Icon>
                </Button>
                <Button Color="Color.Primary" Disabled="true" title="Enviar Facebook">
                    <Blazorise.Icon Name="@("fab fa-facebook")"></Blazorise.Icon>
                </Button>
                <Button Color="Color.Primary" Disabled="true" title="Enviar Instagram">
                    <Blazorise.Icon Name="@("fab fa-instagram")"></Blazorise.Icon>
                </Button>
                <Badge Color="Color.Danger" hidden="@(IsConnected)">Chat desconectado</Badge>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is3.OnFullHD">
        @if (OptionsProfile.HasCustomVisibility)
        {
            <CustomVisibility Options="OptionsProfile"></CustomVisibility>
        }
        else
        {
            <Card Margin="Margin.Is3.FromBottom">
                <CardImage Source="@view.GetMainPhoto()" Alt="@labelPhoto"></CardImage>
                <Tooltip Text="Perfil compatível com o que você procura" Multiline="true" Fade="true" Placement="TooltipPlacement.BottomEnd" Style="position: absolute; top: 5px; left: 10px; cursor: help;">
                    <Badge Color="Color.Success">@(GetPercentAffinity() + "%")</Badge>
                </Tooltip>

                @if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Today)
                {
                    <Tooltip Text="logado recentemente" Multiline="true" Fade="true" Placement="TooltipPlacement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Success">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon>
                        </Badge>
                    </Tooltip>
                }
                else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Week)
                {
                    <Tooltip Text="logado essa semana" Multiline="true" Fade="true" Placement="TooltipPlacement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Warning">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon>
                        </Badge>
                    </Tooltip>
                }
                else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Month)
                {
                    <Tooltip Text="logado esse mês" Multiline="true" Fade="true" Placement="TooltipPlacement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Danger">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon>
                        </Badge>
                    </Tooltip>
                }
                else
                {
                    <Tooltip Text="usuário desativado" Multiline="true" Fade="true" Placement="TooltipPlacement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Dark">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon>
                        </Badge>
                    </Tooltip>
                }
                <CardBody>
                    <Badge Color="Color.Secondary">@view.Basic.NickName</Badge>
                    <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is0">
                        @view.Basic.Description
                    </Paragraph>
                </CardBody>
                <CardBody>
                    <Button Color="Color.Danger" title="Desfazer match">
                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash"></Blazorise.Icon> Match
                    </Button>
                    <Button Color="Color.Danger" title="Reportar este perfil" Float="Float.End" data-toggle="modal" data-target="#modalReport">
                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> Reportar
                    </Button>
                </CardBody>
            </Card>
        }
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnDesktop.Is3.OnFullHD">
        @if (OptionsProfile.HasCustomVisibility)
        {
            <CustomVisibility Options="OptionsProfile"></CustomVisibility>
        }
        else
        {
            <Card Margin="Margin.Is3.FromBottom">
                <CardBody>
                    <Divider DividerType="DividerType.TextContent" Text="Básico"></Divider>

                    <ItemDataProfile For="@(() => view.Distance)" Value="@ProfileHelper.GetDistanceExtension(view.Distance, ProfileHelper.DistanceType.Km)" ClassIcon="fas fa-map-marker-alt" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.Languages)" Values="@view.Basic.Languages" ClassIcon="fas fa-language" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.CurrentSituation)" Value="@view.Basic.CurrentSituation" ClassIcon="far fa-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.Intent)" Values="@view.Basic.Intent" ClassIcon="fas fa-search" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.BiologicalSex)" Value="@view.Basic.BiologicalSex" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.GenderIdentity)" Value="@view.Basic.GenderIdentity" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.SexualOrientation)" Value="@view.Basic.SexualOrientation" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Bio"></Divider>

                    <ItemDataProfile For="@(() => view.Age)" Value="@ProfileHelper.GetAgeExtension(view.Age)" ClassIcon="fas fa-birthday-cake" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Zodiac)" Value="@view.Bio.Zodiac" ClassIcon="fas fa-star-and-crescent" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.BodyMass)" Value="@view.Bio.BodyMass" ClassIcon="fas fa-weight" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.RaceCategory)" Value="@view.Bio.RaceCategory" ClassIcon="fas fa-globe" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Height)" Value="@view.Bio.Height" ClassIcon="fas fa-ruler" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Lifestyle / Personalidades"></Divider>

                    <ItemDataProfile For="@(() => view.Lifestyle.Drink)" Value="@view.Lifestyle.Drink" ClassIcon="fas fa-glass-cheers" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Smoke)" Value="@view.Lifestyle.Smoke" ClassIcon="fas fa-smoking" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Diet)" Value="@view.Lifestyle.Diet" ClassIcon="fas fa-utensils" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.HaveChildren)" Value="@view.Lifestyle.HaveChildren" ClassIcon="fas fa-child" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.WantChildren)" Value="@view.Lifestyle.WantChildren" ClassIcon="fas fa-baby" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.EducationLevel)" Value="@view.Lifestyle.EducationLevel" ClassIcon="fas fa-graduation-cap" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.CareerCluster)" Value="@view.Lifestyle.CareerCluster" ClassIcon="fas fa-briefcase" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Religion)" Value="@view.Lifestyle.Religion" ClassIcon="fas fa-praying-hands" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MoneyPersonality)" Value="@view.Lifestyle.MoneyPersonality" ClassIcon="fas fa-wallet" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.SplitTheBill)" Value="@view.Lifestyle.SplitTheBill" ClassIcon="fas fa-hand-holding-usd" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.RelationshipPersonality)" Value="@view.Lifestyle.RelationshipPersonality" ClassIcon="fas fa-people-arrows" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.SexPersonality)" Value="@view.Lifestyle.SexPersonality" ClassIcon="fas fa-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.LoveLanguage)" Value="@view.Lifestyle.LoveLanguage" ClassIcon="fas fa-hand-holding-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MyersBriggsTypeIndicator)" Value="@view.Lifestyle.MyersBriggsTypeIndicator" ClassIcon="fas fa-user" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Interesses"></Divider>

                    <ItemDataProfile For="@(() => view.Interest.Food)" Values="@view.Interest.Food" ClassIcon="fas fa-pizza-slice" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.Holidays)" Values="@view.Interest.Holidays" ClassIcon="fas fa-plane-departure" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.Sports)" Values="@view.Interest.Sports" ClassIcon="fas fa-swimmer" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.LeisureActivities)" Values="@view.Interest.LeisureActivities" ClassIcon="fas fa-umbrella-beach" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.MusicGenre)" Values="@view.Interest.MusicGenre" ClassIcon="fas fa-music" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.MovieGenre)" Values="@view.Interest.MovieGenre" ClassIcon="fas fa-film" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.TVGenre)" Values="@view.Interest.TVGenre" ClassIcon="fas fa-tv" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.ReadingGenre)" Values="@view.Interest.ReadingGenre" ClassIcon="fas fa-book-reader" Affinities="@affinities"></ItemDataProfile>
                </CardBody>
            </Card>
        }
    </Column>
</Row>

@code
{
    [Parameter]
    public string IdUserView { get; set; }

    private ProfileModel user { get; set; }
    private ProfileView view { get; set; }
    private InteractionModel interaction { get; set; }
    private ChatModel chat { get; set; }
    private List<AffinityVM> affinities = new();
    private ProfileBadgeModel badge = new();

    private string Message { get; set; }

    private bool BtnDisabled { get { return string.IsNullOrEmpty(Message) || !IsConnected || user == null || interaction == null || !interaction.ActiveInteraction(); } }

    private string labelPhoto => $"{view.Basic.NickName}, {view.Age}, {ProfileHelper.GetDistanceExtension(view.Distance, ProfileHelper.DistanceType.Km)}";

    private HubConnection hubConnection;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Http.BaseApi())
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<ChatModel>(interaction.IdChat, (chatModel) =>
            {
                var item = chatModel.Itens.First();

                if (item.IdUserSender != user.Key) //evitar que o usuário receba a própria mensagem
                {
                    chat.Itens.Add(item);
                    StateHasChanged();
                }
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Invalid = interaction == null || !interaction.ActiveInteraction(),
        Loading = chat == null,
        NoData = chat == null || !chat.Itens.Any()
    };

    private VisibilityOptions OptionsProfile => new VisibilityOptions()
    {
        Loading = view == null
    };

    protected override async Task LoadData()
    {
        user = await Http.Profile_Get(SessionStorage);
        view = await Http.Profile_GetView(SessionStorage, IdUserView);

        if (view == null)
        {
            Toast.ShowError("", "Perfil não encontrado. Favor, tentar novamente.");
        }
        else
        {
            affinities = AffinityCore.GetAffinity(user, view);
            if (view?.Badge != null) badge = view.Badge;
            interaction = await Http.Interation_Get(SessionStorage, IdUserView);
            chat = await Http.Interation_GetChat(interaction.IdChat);
        }
    }

    protected async Task SendPrivateMessage()
    {
        try
        {
            var item = new ChatItem(ComponenteUtils.IdUser, TypeContent.Message, Message);

            chat.Itens.Add(item);
            Message = "";

            await Http.PostAsJsonAsync($"{Http.BaseApi()}messages", new ChatModel(Guid.Parse(chat.Key)) { Itens = new List<ChatItem>() { item } }); //envia pro usuário
            await Http.Interaction_AddChat(interaction.IdChat, view.Id, item, Toast); //envia pro banco
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    public double GetPercentAffinity()
    {
        double totCheck = affinities.Count(w => w.HaveAffinity);
        double totItens = affinities.Count;

        return Math.Round((totCheck / totItens) * 100, 0);
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}