@page "/Explore/View/{IdUserView}"
@attribute [Authorize]
@inherits PageCore<Explore.View>

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is4.OnWidescreen">
            <Card Margin="Margin.Is3.FromBottom">
                <CardBody Padding="Padding.Is0">
                    <Badge Color="Color.Success" Style="position: absolute; top: 10px; left: 10px; z-index: 2;">@(GetPercentAffinity(null) + "%")</Badge>
                    <Badge Color="Color.Dark" Style="position: absolute; top: 10px; right: 10px; z-index: 2;">
                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Camera"></Blazorise.Icon> @imageDataUriGallery.Count()
                    </Badge>
                    <Carousel @bind-SelectedSlide="selectedImage" Autoplay="false" ShowControls="imageDataUriGallery.Count() > 1" ShowIndicators="imageDataUriGallery.Count() > 1">
                        @foreach (var item in imageDataUriGallery)
                        {
                            <CarouselSlide @key="@item" Name="@item" Style="text-align: center; background-color: black;">
                                <Image Source="@item" Style="max-height: 450px !important;" />
                            </CarouselSlide>
                        }
                    </Carousel>
                </CardBody>
                <CardBody>
                    <Row Margin="Margin.Is3">
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <Badge Color="Color.Secondary">@view.Basic.NickName</Badge>
                            <Badge Color="Color.Secondary">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt"></Blazorise.Icon> @view.Basic.GetLocation(LocationType.City)
                            </Badge>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsAuto">
                            @if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Today)
                            {
                                <Badge Color="Color.Success" Style="cursor: help;">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado hoje
                                </Badge>
                            }
                            else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Week)
                            {
                                <Badge Color="Color.Warning" Style="cursor: help;" Margin="Margin.Is3.FromLeft">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado esta semana
                                </Badge>
                            }
                            else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Month)
                            {
                                <Badge Color="Color.Danger" Style="cursor: help;" Margin="Margin.Is3.FromLeft">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado este mês
                                </Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Dark" Style="cursor: help;" Margin="Margin.Is3.FromLeft">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> usuário desativado
                                </Badge>
                            }
                            @if (view.Reports.Any())
                            {
                                <Paragraph Margin="Margin.Is0.FromTop.Is0.FromBottom">
                                    @foreach (var item in view.Reports)
                                    {
                                        <Badge Color="Color.Warning" Style="cursor: help;">
                                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> @item.Type.GetName()
                                        </Badge>
                                    }
                                </Paragraph>
                            }
                        </Column>
                    </Row>
                    <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is2.FromTop.Is0.FromBottom">
                        @view.Basic.Description
                    </Paragraph>
                </CardBody>
                <CardBody>
                    @if (interaction != null && interaction.IsActiveInteraction())
                    {
                        <BtnChat IdUserView="@IdUserView"></BtnChat>
                    }
                    else
                    {
                        <BtnBlink IdUserView="@IdUserView"></BtnBlink>
                    }
                    <Dropdown Float="Float.Right">
                        <Button Color="Color.Danger" Clicked="report.ShowModal">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash"></Blazorise.Icon> Deletar
                        </Button>
                        <DropdownToggle Split="true" Color="Color.Danger" />
                        <DropdownMenu>
                            <DropdownItem Clicked="report.ShowModal">Deletar e Denunciar</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is8.OnWidescreen">
            <Row>
                <Column ColumnSize="ColumnSize.IsFull.Is8.OnFullHD">
                    <Card Margin="Margin.Is3.FromBottom">
                        <CardHeader>Conquistas</CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                                    <ProfileBadge Type="@badge.Ranking"></ProfileBadge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                                    <ProfileBadge Type="@badge.Seniority"></ProfileBadge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                                    <ProfileBadge Type="@badge.VerifiedProfile"></ProfileBadge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                                    <ProfileBadge Type="@badge.Popular"></ProfileBadge>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
                <Column ColumnSize="ColumnSize.IsFull.Is4.OnFullHD">
                    <Card Margin="Margin.Is3.FromBottom">
                        <CardHeader>
                            Compatibilidade
                            <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="help.ShowModal" title="Ajuda" Margin="Margin.Is2.FromLeft">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon>
                            </Button>
                        </CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="Color.Secondary" Display="Display.Block">Básico</Badge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Progress>
                                        <ProgressBar Min="0" Max="100" Value="GetPercentAffinity(AffinityCategory.Basic)" Background="GetBackground(AffinityCategory.Basic)" Striped="true">@GetPercentAffinity(AffinityCategory.Basic)%</ProgressBar>
                                    </Progress>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="Color.Secondary" Display="Display.Block">Bio</Badge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Progress>
                                        <ProgressBar Min="0" Max="100" Value="GetPercentAffinity(AffinityCategory.Bio)" Background="GetBackground(AffinityCategory.Bio)" Striped="true">@GetPercentAffinity(AffinityCategory.Bio)%</ProgressBar>
                                    </Progress>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="Color.Secondary" Display="Display.Block">Lifestyle</Badge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Progress>
                                        <ProgressBar Min="0" Max="100" Value="GetPercentAffinity(AffinityCategory.Lifestyle)" Background="GetBackground(AffinityCategory.Lifestyle)" Striped="true">@GetPercentAffinity(AffinityCategory.Lifestyle)%</ProgressBar>
                                    </Progress>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="Color.Secondary" Display="Display.Block">Interesses</Badge>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" Margin="Margin.Is2.FromBottom">
                                    <Progress>
                                        <ProgressBar Min="0" Max="100" Value="GetPercentAffinity(AffinityCategory.Interest)" Background="GetBackground(AffinityCategory.Interest)" Striped="true">@GetPercentAffinity(AffinityCategory.Interest)%</ProgressBar>
                                    </Progress>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
            <Card Margin="Margin.Is3.FromBottom">
                <CardBody>
                    <Divider DividerType="DividerType.TextContent" Text="Básico"></Divider>

                    <ItemDataProfile For="@(() => view.Distance)" Value="@ProfileHelper.GetDistanceExtension(view.Distance, ProfileHelper.DistanceType.Km)" ClassIcon="fas fa-map-marker-alt" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.Languages)" Values="@view.Basic.Languages" ClassIcon="fas fa-language" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.CurrentSituation)" Value="@view.Basic.CurrentSituation" ClassIcon="far fa-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.Intent)" Values="@view.Basic.Intent" ClassIcon="fas fa-search" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.BiologicalSex)" Value="@view.Basic.BiologicalSex" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.GenderIdentity)" Value="@view.Basic.GenderIdentity" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.SexualOrientation)" Value="@view.Basic.SexualOrientation" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Bio"></Divider>

                    <ItemDataProfile For="@(() => view.Age)" Value="@ProfileHelper.GetAgeExtension(view.Age)" ClassIcon="fas fa-birthday-cake" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Zodiac)" Value="@view.Bio.Zodiac" ClassIcon="fas fa-star-and-crescent" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.BodyMass)" Value="@view.Bio.BodyMass" ClassIcon="fas fa-weight" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.RaceCategory)" Value="@view.Bio.RaceCategory" ClassIcon="fas fa-globe" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Height)" Value="@view.Bio.Height" ClassIcon="fas fa-ruler" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Lifestyle / Personalidades"></Divider>

                    <ItemDataProfile For="@(() => view.Lifestyle.Drink)" Value="@view.Lifestyle.Drink" ClassIcon="fas fa-glass-cheers" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Smoke)" Value="@view.Lifestyle.Smoke" ClassIcon="fas fa-smoking" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Diet)" Value="@view.Lifestyle.Diet" ClassIcon="fas fa-utensils" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.HaveChildren)" Value="@view.Lifestyle.HaveChildren" ClassIcon="fas fa-child" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.WantChildren)" Value="@view.Lifestyle.WantChildren" ClassIcon="fas fa-baby" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.EducationLevel)" Value="@view.Lifestyle.EducationLevel" ClassIcon="fas fa-graduation-cap" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.CareerCluster)" Value="@view.Lifestyle.CareerCluster" ClassIcon="fas fa-briefcase" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Religion)" Value="@view.Lifestyle.Religion" ClassIcon="fas fa-praying-hands" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MoneyPersonality)" Value="@view.Lifestyle.MoneyPersonality" ClassIcon="fas fa-wallet" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.SplitTheBill)" Value="@view.Lifestyle.SplitTheBill" ClassIcon="fas fa-hand-holding-usd" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.RelationshipPersonality)" Value="@view.Lifestyle.RelationshipPersonality" ClassIcon="fas fa-people-arrows" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.SexPersonality)" Value="@view.Lifestyle.SexPersonality" ClassIcon="fas fa-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.LoveLanguage)" Value="@view.Lifestyle.LoveLanguage" ClassIcon="fas fa-hand-holding-heart" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MyersBriggsTypeIndicator)" Value="@view.Lifestyle.MyersBriggsTypeIndicator" ClassIcon="fas fa-user" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Interesses"></Divider>

                    <ItemDataProfile For="@(() => view.Interest.Food)" Values="@view.Interest.Food" ClassIcon="fas fa-pizza-slice" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.Holidays)" Values="@view.Interest.Holidays" ClassIcon="fas fa-plane-departure" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.Sports)" Values="@view.Interest.Sports" ClassIcon="fas fa-swimmer" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.LeisureActivities)" Values="@view.Interest.LeisureActivities" ClassIcon="fas fa-umbrella-beach" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.MusicGenre)" Values="@view.Interest.MusicGenre" ClassIcon="fas fa-music" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.MovieGenre)" Values="@view.Interest.MovieGenre" ClassIcon="fas fa-film" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.TVGenre)" Values="@view.Interest.TVGenre" ClassIcon="fas fa-tv" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Interest.ReadingGenre)" Values="@view.Interest.ReadingGenre" ClassIcon="fas fa-book-reader" Affinities="@affinities"></ItemDataProfile>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <VerusDate.Web.Shared.modal.ProfileReport @ref="report"></VerusDate.Web.Shared.modal.ProfileReport>
    <VerusDate.Web.Shared.modal.BasicModal @ref="help" Title="Ajuda">
        <ul>
            <li>O cálculo é baseado em pesquisas e estatísticas, podendo não refletir com precisão todos os casos e/ou contextos;</li>
            <li>Caso tenha dúvidas e/ou sugestões de melhorias, favor abrir um ticket na nossa página de suporte;</li>
        </ul>
    </VerusDate.Web.Shared.modal.BasicModal>
}

@code {

    [Parameter]
    public string IdUserView { get; set; }

    private ProfileModel user;
    private ProfileView view;
    private List<AffinityVM> affinities = new();
    private ProfileGamificationModel gamification;
    private ProfileBadgeModel badge = new();
    private InteractionModel interaction;

    string selectedImage;
    string[] imageDataUriGallery = Array.Empty<string>();

    private Shared.modal.BasicModal help;
    private Shared.modal.ProfileReport report;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = IsLoading,
        //Invalid = IdUserView == ComponenteUtils.IdUser
    };

    protected override async Task LoadData()
    {
        user = await Http.Profile_Get(SessionStorage);
        view = await Http.Profile_GetView(SessionStorage, IdUserView);

        if (view == null)
        {
            Toast.ShowError("", "Perfil não encontrado. Favor, tentar novamente.");
        }
        else
        {
            imageDataUriGallery = new string[] { view.GetMainPhoto() }.Concat(view.GetGalleryPhotos()).ToArray();
            selectedImage = imageDataUriGallery.FirstOrDefault();

            affinities = AffinityCore.GetAffinity(user, view);
            gamification = view.Gamification;
            if (view?.Badge != null) badge = view.Badge;
            interaction = await Http.Interation_Get(SessionStorage, IdUserView.ToString());
        }
    }

    private async Task Desike(string IdUserInteraction)
    {
        try
        {
            await Http.Interation_Deslike(IdUserInteraction);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Like(string IdUserInteraction)
    {
        try
        {
            await Http.Interation_Like(IdUserInteraction, SessionStorage, Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Blink(string IdUserInteraction)
    {
        try
        {
            await Http.Interation_Blink(IdUserInteraction, SessionStorage, Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private string GetClassAffinity(string field)
    {
        if (!affinities.Any(s => s.AttributeName == field)) return "badge badge-secondary";

        if (affinities.Single(s => s.AttributeName == field).HaveAffinity)
        {
            return "badge badge-success";
        }
        else
        {
            return "badge badge-danger";
        }
    }

    public int GetPercentAffinity(AffinityCategory? category = null)
    {
        if (category == null)
        {
            var totBasic = GetPercentAffinity(AffinityCategory.Basic);
            var totBio = GetPercentAffinity(AffinityCategory.Bio);
            var totLifestyle = GetPercentAffinity(AffinityCategory.Lifestyle);
            var totInterest = GetPercentAffinity(AffinityCategory.Interest);

            var pesoBasic = 1;
            var pesoBio = 1;
            var pesoLifestyle = 4;
            var pesoInterest = 2;

            if (user.Basic.Intent.IsLongTerm() && view.Basic.Intent.IsLongTerm())
            {
                return (totBasic * pesoBasic + totBio * pesoBio + totLifestyle * pesoLifestyle + totInterest * pesoInterest) / (pesoBasic + pesoBio + pesoLifestyle + pesoInterest);
            }
            else
            {
                return (totBasic * pesoBasic + totBio * pesoBio) / (pesoBasic + pesoBio);
            }
        }
        else
        {
            double totCheck = affinities.Where(w => w.Category == category).Count(w => w.HaveAffinity);
            double totItens = affinities.Where(w => w.Category == category).Count();

            if (totCheck == 0 || totItens == 0) return 0;

            return Convert.ToInt32(Math.Round((totCheck / totItens) * 100, 0));
        }
    }

    public Background GetBackground(AffinityCategory category)
    {
        var perc = GetPercentAffinity(category);

        if (perc >= 80)
        {
            return Background.Success;
        }
        else if (perc >= 60)
        {
            return Background.Warning;
        }
        else
        {
            return Background.Danger;
        }
    }
}