@page "/"
@attribute [Authorize]
@inherits PageCore<Index>

<Row Gutter="(8,0)">
    <Column ColumnSize="ColumnSize.Is12">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>
                @string.Format(Resources.CardHeader.IndexHighlights, profile?.Basic?.GetLocation(LocationType.City))
            </CardHeader>
            <CardBody>
                @if (OptionsDestaques.HasCustomVisibility)
                {
                    <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                }
                else
                {
                    <Row Gutter="(8,0)">
                        @foreach (var item in lstDestaques)
                        {
                            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnDesktop.Is4.OnMobile">
                                <Blazorise.Link Clicked="@(async()=> await _PopupProfile.ShowModal(item.Id))" Style="cursor: pointer;">
                                    <Card Margin="Margin.Is2.FromBottom.OnMobile.Is0.OnFullHD" Style="display:block; text-align:center;">
                                        <Figure Margin="Margin.Is0" Size="FigureSize.Is64x64">
                                            <FigureImage Source="@item.GetMainPhoto()" Rounded="true" AlternateText="Photo Image" />
                                        </Figure>
                                        <Badge Color="Color.Light" Style="font-size: 9px; position: absolute; top: 5px; left: 5px;">99 XP</Badge>
                                        <CardText Color="TextColor.Secondary" Alignment="TextAlignment.Center" Weight="TextWeight.Bold" Style="font-size: 11px;">
                                            @item.NickName
                                        </CardText>
                                    </Card>
                                </Blazorise.Link>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
    </Column>
</Row>
<Row Gutter="(8,0)">
    <Column ColumnSize="ColumnSize.Is12.Is6.OnDesktop">
        <Row Gutter="(8,0)">
            <Column ColumnSize="ColumnSize.Is6">
                <Card Margin="Margin.Is2.FromBottom">
                    <CardHeader Style="background-color: #D4AF37; color: #fff !important;">
                        <Blazorise.Icon Name="FontAwesomeIcons.Crown"></Blazorise.Icon>
                        @Resources.CardHeader.IndexRanking
                    </CardHeader>
                    <CardBody>
                        @if (OptionsGamification.HasCustomVisibility)
                        {
                            <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                        }
                        else
                        {
                            <CardText>
                                @gamification?.Ranking (@gamification?.XP %)
                            </CardText>
                        }
                    </CardBody>
                </Card>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Card Margin="Margin.Is2.FromBottom">
                    <CardHeader Style="background-color: #5c7cfa; color: #fff !important;">
                        <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon>
                        @Resources.CardHeader.IndexDiamond
                    </CardHeader>
                    <CardBody>
                        @if (OptionsGamification.HasCustomVisibility)
                        {
                            <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                        }
                        else
                        {
                            <CardText>
                                @gamification?.Diamond
                            </CardText>
                        }
                        <Button Clicked="AddDiamond" Color="Color.Primary">add gem</Button>
                    </CardBody>
                </Card>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Card Margin="Margin.Is2.FromBottom">
                    <CardHeader Style="background-color: #dc3545; color: #fff !important;">
                        <Blazorise.Icon Name="FontAwesomeIcons.AppleAlt"></Blazorise.Icon>
                        @Resources.CardHeader.IndexApple
                    </CardHeader>
                    <CardBody>
                        @if (OptionsGamification.HasCustomVisibility)
                        {
                            <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                        }
                        else
                        {
                            <CardText>
                                @gamification?.Food / @gamification.GetMaxFood()
                            </CardText>
                        }
                    </CardBody>
                </Card>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Card Margin="Margin.Is2.FromBottom">
                    <CardHeader Class="bg-info" Style="color: #fff !important;">
                        <Blazorise.Icon Name="FontAwesomeIcons.ThumbsUp"></Blazorise.Icon>
                        @Resources.CardHeader.IndexPopularity
                    </CardHeader>
                    <CardBody>
                        @if (OptionsGamification.HasCustomVisibility)
                        {
                            <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                        }
                        else
                        {
                            <CardText>100%</CardText>
                        }
                    </CardBody>
                </Card>
            </Column>
        </Row>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
    </Column>
</Row>

<PopupProfile @ref="_PopupProfile" Http="@Http"></PopupProfile>

@code
{
    public PopupProfile _PopupProfile { get; set; }

    private ProfileModel profile = new();
    private ProfileGamificationModel gamification = new();
    private List<ProfileSearch> lstDestaques = new();

    private VisibilityOptions OptionsDestaques => new VisibilityOptions()
    {
        Loading = IsLoading,
        NoData = lstDestaques != null && !lstDestaques.Any()
    };

    private VisibilityOptions OptionsGamification => new VisibilityOptions()
    {
        Loading = IsLoading,
        NoData = gamification == null
    };

    protected override async Task LoadData()
    {
        if (ComponenteUtils.IsAuthenticated)
        {
            //lstDestaques = await Http.Public_ListDestaques(SessionStorage);
            profile = await Http.Profile_Get(SessionStorage);
            gamification = profile?.Gamification;
        }
    }

    protected async Task AddDiamond()
    {
        try
        {
            await Http.Store_AddDiamond(1, SessionStorage, Toast);

            profile = await Http.Profile_Get(SessionStorage);
            gamification = profile?.Gamification;
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}