@page "/"
@attribute [Authorize]
@inherits PageCore<Index>

<Row Gutter="(8,0)">
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardBody Padding="Padding.Is0">
                <Carousel @bind-SelectedSlide="selectedImage" Autoplay="false" ShowControls="imageDataUriGallery.Count() > 1" ShowIndicators="imageDataUriGallery.Count() > 1">
                    @foreach (var item in imageDataUriGallery)
                    {
                        <CarouselSlide @key="@item" Name="@item" Style="text-align: center; background-color: black;">
                            <Image Source="@item" Style="max-height: 450px !important;" />
                        </CarouselSlide>
                    }
                </Carousel>
            </CardBody>
            <CardBody>
                <Row Gutter="(8,0)">
                    <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Outline="true" Block="true" Type="ButtonType.Link" To="/Profile/Data">
                            <Blazorise.Icon Name="FontAwesomeIcons.UserEdit"></Blazorise.Icon> Dados
                            @if (profile?.DtInsert == null)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle" Style="color: #dc3545;"></Blazorise.Icon>
                            }
                        </Button>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Outline="true" Block="true" Type="ButtonType.Link" To="/Profile/Preference">
                            <Blazorise.Icon Name="FontAwesomeIcons.UserCheck"></Blazorise.Icon> Busca
                            @if (profile?.Preference == null)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle" Style="color: #dc3545;"></Blazorise.Icon>
                            }
                        </Button>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Outline="true" Block="true" Type="ButtonType.Link" To="/Profile/Gallery">
                            <Blazorise.Icon Name="FontAwesomeIcons.Portrait"></Blazorise.Icon> Fotos
                            @if (profile?.Photo == null)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle" Style="color: #dc3545;"></Blazorise.Icon>
                            }
                        </Button>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Outline="true" Block="true" Type="ButtonType.Link" To="/Profile/Account">
                            <Blazorise.Icon Name="FontAwesomeIcons.UserCog"></Blazorise.Icon> Conta
                        </Button>
                    </Column>
                </Row>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnWidescreen">
        @*<Card Margin="Margin.Is2.FromBottom">
        <CardHeader>@Resources.CardHeader.ProfileIndexAchievements</CardHeader>
        <CardBody>
        <Row Gutter="(8,0)">
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
        <ProfileBadge Type="@badge.Ranking"></ProfileBadge>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
        <ProfileBadge Type="@badge.Seniority"></ProfileBadge>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
        <ProfileBadge Type="@badge.VerifiedProfile"></ProfileBadge>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
        <ProfileBadge Type="@badge.Popular"></ProfileBadge>
        </Column>
        </Row>
        </CardBody>
        </Card>*@
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>
                @string.Format(Resources.CardHeader.IndexHighlights, GetSuggestionTitle())
            </CardHeader>
            <CardBody>
                @if (OptionsDestaques.HasCustomVisibility)
                {
                    <CustomVisibility Options="OptionsDestaques"></CustomVisibility>
                }
                else
                {
                    <Row Gutter="(8,0)">
                        @foreach (var item in lstDestaques)
                        {
                            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnDesktop.Is4.OnMobile">
                                <Blazorise.Link Clicked="@(async()=> await _PopupProfile.ShowModal(item.Id))" Style="cursor: pointer;">
                                    <Card Margin="Margin.Is2.FromBottom.OnMobile.Is0.OnFullHD" Style="display:block; text-align:center;">
                                        <Figure Margin="Margin.Is0" Size="FigureSize.Is64x64">
                                            <FigureImage Source="@item.GetMainPhoto()" Rounded="true" AlternateText="Photo Image" />
                                        </Figure>
                                        <Badge Color="Color.Light" Style="font-size: 9px; position: absolute; top: 5px; left: 5px;">99 XP</Badge>
                                        <CardText Color="TextColor.Secondary" Alignment="TextAlignment.Center" Weight="TextWeight.Bold" Style="font-size: 11px;">
                                            @item.NickName
                                        </CardText>
                                    </Card>
                                </Blazorise.Link>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>@Resources.CardHeader.ProfileIndexInteractions</CardHeader>
            <CardBody>
                <Row Gutter="(8,0)">
                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD" Margin="Margin.Is2.FromBottom">
                        <Tooltip Text="ver caixa de mensagens" Multiline="true" Fade="true" Style="display: block;">
                            <Button Color="Color.Primary" Type="ButtonType.Link" Block="true" To="/Profile/Interactions" Disabled="true">
                                <Blazorise.Icon Name="FontAwesomeIcons.Comments"></Blazorise.Icon> Mensagens
                                <Badge Color="Color.Light">0</Badge>
                                <Badge Color="Color.Danger">0</Badge>
                            </Button>
                        </Tooltip>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD" Margin="Margin.Is2.FromBottom">
                        <Tooltip Text="ver likes recebidos" Multiline="true" Fade="true" Style="display: block;">
                            <Button Color="Color.Primary" Type="ButtonType.Link" Block="true" To="/Profile/Interactions" Disabled="true">
                                <Blazorise.Icon Name="FontAwesomeIcons.ThumbsUp"></Blazorise.Icon> Likes
                                <Badge Color="Color.Light">0</Badge>
                            </Button>
                        </Tooltip>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD" Margin="Margin.Is2.FromBottom">
                        <Tooltip Text="ver piscadinhas recebidas" Multiline="true" Fade="true" Style="display: block;">
                            <Button Color="Color.Primary" Type="ButtonType.Link" Block="true" To="/Profile/Interactions" Disabled="true">
                                <Blazorise.Icon Name="FontAwesomeIcons.KissWinkHeart"></Blazorise.Icon> Piscadinhas
                                <Badge Color="Color.Light">0</Badge>
                            </Button>
                        </Tooltip>
                    </Column>
                </Row>
            </CardBody>
        </Card>
    </Column>
</Row>

<PopupProfile @ref="_PopupProfile" Http="@Http"></PopupProfile>

@code
{
    public PopupProfile _PopupProfile { get; set; }

    private ProfileModel profile = new();
    //private ProfileGamificationModel gamification = new();
    private List<ProfileSearch> lstDestaques = new();

    string selectedImage;
    string[] imageDataUriGallery = new string[] { };

    private VisibilityOptions OptionsDestaques => new VisibilityOptions()
        {
            Loading = IsLoading,
            NoData = lstDestaques != null && !lstDestaques.Any()
        };

    //private VisibilityOptions OptionsGamification => new VisibilityOptions()
    //{
    //    Loading = IsLoading,
    //    NoData = gamification == null
    //};

    protected override async Task LoadData()
    {
        if (ComponenteUtils.IsAuthenticated)
        {
            //lstDestaques = await Http.Public_ListDestaques(SessionStorage);
            profile = await Http.Profile_Get(SessionStorage);
            //gamification = profile?.Gamification;

            if (profile != null)
            {
                imageDataUriGallery = new string[] { profile.GetMainPhoto() }.Concat(profile.GetGalleryPhotos()).ToArray();
            }
            else
            {
                imageDataUriGallery = new string[] { ImageHelper.GetNoUserPhoto };
            }

            selectedImage = imageDataUriGallery?.FirstOrDefault();
        }
    }

    private string GetSuggestionTitle()
    {
        if (profile?.Preference?.Region == null) return "";

        switch (profile.Preference.Region)
        {
            case Region.City:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.City)}";
            case Region.State:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.State)}";
            case Region.Country:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.Country)}";
            case Region.World:
                return $"{profile.Preference.Region.GetName()}";
            default:
                return "";
        }
    }

    //protected async Task AddDiamond()
    //{
    //    try
    //    {
    //        await Http.Store_AddDiamond(1, SessionStorage, Toast);

    //        profile = await Http.Profile_Get(SessionStorage);
    //        gamification = profile?.Gamification;
    //    }
    //    catch (Exception ex)
    //    {
    //        ex.ProcessException(Toast, Logger);
    //    }
    //}
}