@page "/Profile/Account"
@attribute [Authorize]
@inherits PageCore<Account>
@using System.Security.Claims

<Row Gutter="(8,0)">
    <Column ColumnSize="ColumnSize.Is6.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>@Resources.CardHeader.ProfileAccountRegistrationData</CardHeader>
            <CardBody>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Provedor de Acesso</FieldLabel>
                        <TextEdit Text="@principal.IdentityProvider" Disabled="true" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Identificação</FieldLabel>
                        <TextEdit Text="@principal.UserDetails" Disabled="true" />
                    </Field>
                </Fields>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Email</FieldLabel>
                        <TextEdit Text="@principal.Email" Disabled="true" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Mobile</FieldLabel>
                        <TextEdit Text="@principal.Mobile" Disabled="true" />
                    </Field>
                </Fields>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>@Resources.CardHeader.ProfileAccountActions</CardHeader>
            <CardBody>
                <Tooltip Text="Limpar o cache local, caso esteja com problemas dos dados sendo exibidos" Placement="TooltipPlacement.Bottom" Multiline="true">
                    <Button Color="Color.Primary" Block="true" Clicked="()=>{ ClearCache(); }">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eraser" /> Limpar Cache
                    </Button>
                </Tooltip>
                <Tooltip Text="Desfaz todas as interações feitas com outros usuários (isso não afeta seus dados pessoais)" Placement="TooltipPlacement.Bottom" Multiline="true">
                    <Button Color="Color.Warning" Block="true" Clicked="()=>{ ResetInteractions(); }" Disabled="true">
                        <Blazorise.Icon Name="FontAwesomeIcons.FastBackward" /> Resetar Interações
                    </Button>
                </Tooltip>
                <Tooltip Text="Caso queira apagar seu perfil e todas as interações feitas (seu perfil não ficará mais disponível)" Placement="TooltipPlacement.Bottom" Multiline="true">
                    <Button Color="Color.Danger" Block="true" Clicked="()=>{ DeleteAccount(principal.IdentityProvider); }">
                        <Blazorise.Icon Name="FontAwesomeIcons.UserSlash" /> Deletar Conta
                    </Button>
                </Tooltip>
            </CardBody>
        </Card>
    </Column>
</Row>

@code {
    private ClientePrincipal principal = new();

    protected override async Task LoadData()
    {
        if (ComponenteUtils.IsAuthenticated)
        {
            principal = await Http.Principal_Get(SessionStorage);

            if (principal == null) principal = new();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState != null)
            {
                var user = authState.User;

                if (user != null)
                {
                    principal.UserId = user.Claims.FirstOrDefault(w => w.Type == ClaimTypes.NameIdentifier)?.Value;
                    principal.IdentityProvider = user.Identity?.AuthenticationType;
                    principal.UserDetails = user.Identity?.Name;
                    principal.UserRoles = user.Claims.Where(w => w.Type == ClaimTypes.Role)?.Select(s => s.Value).ToArray();
                }

                principal.Email = principal.UserDetails;
            }
        }
    }

    private void ClearCache()
    {
        SessionStorage.Clear();

        Toast.ShowSuccess("", "Operação efetuada com sucesso!");
    }

    private void ResetInteractions()
    {
        //transferir para backup

        //deletar dados

        Toast.ShowSuccess("", "Operação efetuada com sucesso!");
    }

    private void DeleteAccount(string provider)
    {
        //transferir para backup

        //deletar dados

        //await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("/.auth/purge/" + provider);
    }
}