@page "/Profile/Data"
@attribute [Authorize]
@inherits PageCore<ProfileData>

<CustomVisibility Loading="ProfileLoading">
    <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidationValidator />
        <Div Margin="Margin.Is2.OnY">
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Basic)" Clicked="(() => ChangeOrder(Tabs.Basic))">Básico</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Bio)" Clicked="(() => ChangeOrder(Tabs.Bio))">Bio</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Lifestyle)" Clicked="(() => ChangeOrder(Tabs.Lifestyle))">Lifestyle</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Personality)" Clicked="(() => ChangeOrder(Tabs.Personality))">Personalidades</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Interests)" Clicked="(() => ChangeOrder(Tabs.Interests))">Interesses</Button>
            @if (profile.Modality == Modality.RelationshipAnalysis)
            {
                <Button Margin="Margin.Is1.FromBottom.Is1.FromStart" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.MyRelationship)" Clicked="(() => ChangeOrder(Tabs.MyRelationship))">Meu Relacionamento</Button>
            }
        </Div>

        @if (SelectedTab == Tabs.Basic)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.Modality)" TValue="Modality?" TEnum="Modality" @bind-SelectedValue="@profile.Modality"
                             CssIcon="@FontAwesomeIcons.YinYang" Required="true" LabelSize="LabelSize.Short"></FieldSelect>
                    <FieldText For="@(() => profile.NickName)" @bind-Value="@profile.NickName" CssIcon="@FontAwesomeIcons.User" Required="true" LabelSize="LabelSize.Short"></FieldText>
                    <FieldText For="@(() => profile.Description)" @bind-Value="@profile.Description" CssIcon="@FontAwesomeIcons.QuoteLeft"
                           Required="(profile.Modality == Modality.Matchmaker)" Visible="(profile.Modality == Modality.Matchmaker)" Rows="7" LabelSize="LabelSize.Short"></FieldText>
                    <FieldText For="@(() => profile.Location)" @bind-Value="@profile.Location" CssIcon="@FontAwesomeIcons.MapMarkerAlt" Required="true" Disabled="true"
                           ButtomClicked="async ()=> { await SetLocation(profile); }" ButtomCssIcon="@FontAwesomeIcons.MapMarkedAlt" LabelSize="LabelSize.Short" ButtomTitle="Recuperar posição GPS"></FieldText>
                    <FieldSelect For="@(() => profile.Languages)" TValue="IReadOnlyList<Language>" TEnum="Language" @bind-SelectedValues="@profile.Languages"
                             CssIcon="@FontAwesomeIcons.Language" Required="true" Multiple="true" LabelSize="LabelSize.Short"></FieldSelect>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.CurrentSituation)" TValue="CurrentSituation?" TEnum="CurrentSituation" @bind-SelectedValue="@profile.CurrentSituation"
                             CssIcon="@FontAwesomeIcons.Heart" Required="(profile.Modality == Modality.Matchmaker)" Visible="(profile.Modality == Modality.Matchmaker)"></FieldSelect>
                    <FieldSelect For="@(() => profile.Intentions)" TValue="IReadOnlyList<Intentions>" TEnum="Intentions" @bind-SelectedValues="@profile.Intentions"
                             CssIcon="@FontAwesomeIcons.Search" ShowGroup="true" Required="true" Multiple="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.BiologicalSex)" TValue="BiologicalSex?" TEnum="BiologicalSex" @bind-SelectedValue="@profile.BiologicalSex"
                             CssIcon="@FontAwesomeIcons.Neuter" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.GenderIdentity)" TValue="GenderIdentity?" TEnum="GenderIdentity" @bind-SelectedValue="@profile.GenderIdentity"
                             CssIcon="@FontAwesomeIcons.Neuter" ShowGroup="true" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.SexualOrientation)" TValue="SexualOrientation?" TEnum="SexualOrientation" @bind-SelectedValue="@profile.SexualOrientation"
                             CssIcon="@FontAwesomeIcons.Neuter" Required="true"></FieldSelect>
                </Column>
            </Row>
        }
        else if (SelectedTab == Tabs.Bio)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.RaceCategory)" TValue="RaceCategory?" TEnum="RaceCategory" @bind-SelectedValue="@profile.RaceCategory"
                             CssIcon="@FontAwesomeIcons.Globe" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.BodyMass)" TValue="BodyMass?" TEnum="BodyMass" @bind-SelectedValue="@profile.BodyMass"
                             CssIcon="@FontAwesomeIcons.Weight" Required="true" ShowHelper="false"></FieldSelect>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <CustomDate Type="FieldType.Date" For="@(() => profile.BirthDate)" @bind-Value="@profile.BirthDate"
                            CssIcon="@FontAwesomeIcons.BirthdayCake" Required="true"></CustomDate>
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD" Display="Display.None.Block.OnFullHD">
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                            <TextEdit Text="@(profile.BirthDate.GetAge() + " Anos")" Disabled="true"></TextEdit>
                        </FieldBody>
                        <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                            <TextEdit Text="@profile.BirthDate.GetZodiac().GetName()" Disabled="true"></TextEdit>
                        </FieldBody>
                    </Field>
                    <FieldSelect For="@(() => profile.Height)" TValue="VerusDate.Shared.Enum.Height?" TEnum="VerusDate.Shared.Enum.Height" @bind-SelectedValue="@profile.Height"
                             CssIcon="@FontAwesomeIcons.Ruler" Required="true" ShowHelper="false"></FieldSelect>
                </Column>
            </Row>
            <Card>
                <CardHeader>
                    Outros (seção opcional)
                </CardHeader>
                <CardBody>
                    <Alert Visible="true" Color="Color.Warning">
                        <AlertDescription>Fazemos o possível para manter um ambiente saudável dentro da plataforma, mas não podemos garantir 100%. Então caso tenha dificuldades de interagir ou de identificar más intenções nas pessoas, não sinta vergonha de pedir ajuda a amigos ou familiares. E se sofrer qualquer tipo de assédio e/ou preconceito, denuncie o perfil imediatamente.</AlertDescription>
                    </Alert>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldSelect For="@(() => profile.Neurodiversity)" TValue="Neurodiversity?" TEnum="Neurodiversity" @bind-SelectedValue="@profile.Neurodiversity"
                                     CssIcon="@FontAwesomeIcons.Brain"></FieldSelect>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldSelect For="@(() => profile.Disabilities)" TValue="IReadOnlyList<Disability>" TEnum="Disability" @bind-SelectedValues="@profile.Disabilities"
                                     CssIcon="@FontAwesomeIcons.Wheelchair" Multiple="true"></FieldSelect>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        }
        else if (SelectedTab == Tabs.Lifestyle)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.Drink)" TValue="Drink?" TEnum="Drink" @bind-SelectedValue="@profile.Drink"
                             CssIcon="@FontAwesomeIcons.GlassCheers" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.Smoke)" TValue="Smoke?" TEnum="Smoke" @bind-SelectedValue="@profile.Smoke"
                             CssIcon="@FontAwesomeIcons.Smoking" ShowHelper="false" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.Diet)" TValue="Diet?" TEnum="Diet" @bind-SelectedValue="@profile.Diet"
                             CssIcon="@FontAwesomeIcons.Utensils" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.Religion)" TValue="Religion?" TEnum="Religion" @bind-SelectedValue="@profile.Religion"
                             CssIcon="@FontAwesomeIcons.PrayingHands" Required="true"></FieldSelect>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.HaveChildren)" TValue="HaveChildren?" TEnum="HaveChildren" @bind-SelectedValue="@profile.HaveChildren"
                             CssIcon="@FontAwesomeIcons.Child" ShowHelper="false" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.WantChildren)" TValue="WantChildren?" TEnum="WantChildren" @bind-SelectedValue="@profile.WantChildren"
                             CssIcon="@FontAwesomeIcons.Baby" ShowHelper="false" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.EducationLevel)" TValue="EducationLevel?" TEnum="EducationLevel" @bind-SelectedValue="@profile.EducationLevel"
                             CssIcon="@FontAwesomeIcons.GraduationCap" ShowHelper="false" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.CareerCluster)" TValue="CareerCluster?" TEnum="CareerCluster" @bind-SelectedValue="@profile.CareerCluster"
                             CssIcon="@FontAwesomeIcons.Briefcase" ShowGroup="true" Required="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.TravelFrequency)" TValue="TravelFrequency?" TEnum="TravelFrequency" @bind-SelectedValue="@profile.TravelFrequency"
                             CssIcon="@FontAwesomeIcons.Plane" ShowGroup="true" Required="true"></FieldSelect>
                </Column>
            </Row>
        }
        else if (SelectedTab == Tabs.Personality)
        {
            <Alert Visible="true" Color="Color.Info">
                <AlertDescription>Os campos deste tópico requerem um teste, mas alguns poderão facilmente ser escolhidos apenas lendo a descrição dos itens</AlertDescription>
            </Alert>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.MoneyPersonality)" TValue="MoneyPersonality?" TEnum="MoneyPersonality" @bind-SelectedValue="@profile.MoneyPersonality"
                             CssIcon="@FontAwesomeIcons.Wallet" LabelSize="LabelSize.Big" HelpLink="https://empower.me/quiz/"></FieldSelect>
                    <FieldSelect For="@(() => profile.SplitTheBill)" TValue="SplitTheBill?" TEnum="SplitTheBill" @bind-SelectedValue="@profile.SplitTheBill"
                             CssIcon="@FontAwesomeIcons.HandHoldingUsd" LabelSize="LabelSize.Big"></FieldSelect>
                    <FieldSelect For="@(() => profile.RelationshipPersonality)" TValue="RelationshipPersonality?" TEnum="RelationshipPersonality" @bind-SelectedValue="@profile.RelationshipPersonality"
                             CssIcon="@FontAwesomeIcons.PeopleArrows" LabelSize="LabelSize.Big" HelpLink="https://theanatomyoflove.com/relationship-quizzes/helen-fishers-personality-test/"></FieldSelect>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.MyersBriggsTypeIndicator)" TValue="MyersBriggsTypeIndicator?" TEnum="MyersBriggsTypeIndicator" @bind-SelectedValue="@profile.MyersBriggsTypeIndicator"
                             CssIcon="@FontAwesomeIcons.User" LabelSize="LabelSize.Big" HelpLink="https://www.16personalities.com/" ShowGroup="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.LoveLanguage)" TValue="LoveLanguage?" TEnum="LoveLanguage" @bind-SelectedValue="@profile.LoveLanguage"
                             CssIcon="@FontAwesomeIcons.HandHoldingHeart" LabelSize="LabelSize.Big" HelpLink="https://www.5lovelanguages.com/quizzes/singles-quiz/"></FieldSelect>
                    <FieldSelect For="@(() => profile.SexPersonality)" TValue="SexPersonality?" TEnum="SexPersonality" @bind-SelectedValue="@profile.SexPersonality"
                             CssIcon="@FontAwesomeIcons.Heart" LabelSize="LabelSize.Big" HelpLink="https://www.vmtherapy.com/personality-type/"></FieldSelect>
                </Column>
            </Row>
        }
        else if (SelectedTab == Tabs.Interests)
        {
            <Alert Visible="true" Color="Color.Info">
                <AlertDescription>Escolha no máximo 3 itens para cada campo</AlertDescription>
            </Alert>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.Food)" TValue="IReadOnlyList<Food>" TEnum="Food" @bind-SelectedValues="@profile.Food"
                             CssIcon="@FontAwesomeIcons.PizzaSlice" LabelSize="LabelSize.Short" Multiple="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.Vacation)" TValue="IReadOnlyList<Vacation>" TEnum="Vacation" @bind-SelectedValues="@profile.Vacation"
                             CssIcon="@FontAwesomeIcons.PlaneDeparture" LabelSize="LabelSize.Short" Multiple="true" Order="(o => o.Name)"></FieldSelect>
                    <FieldSelect For="@(() => profile.Sports)" TValue="IReadOnlyList<Sports>" TEnum="Sports" @bind-SelectedValues="@profile.Sports"
                             CssIcon="@FontAwesomeIcons.Swimmer" LabelSize="LabelSize.Short" Multiple="true" Order="(o => o.Name)"></FieldSelect>
                    <FieldSelect For="@(() => profile.LeisureActivities)" TValue="IReadOnlyList<LeisureActivities>" TEnum="LeisureActivities" @bind-SelectedValues="@profile.LeisureActivities"
                             CssIcon="@FontAwesomeIcons.UmbrellaBeach" LabelSize="LabelSize.Short" Multiple="true" Order="(o => o.Name)"></FieldSelect>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldSelect For="@(() => profile.MusicGenre)" TValue="IReadOnlyList<MusicGenre>" TEnum="MusicGenre" @bind-SelectedValues="@profile.MusicGenre"
                             CssIcon="@FontAwesomeIcons.Music" LabelSize="LabelSize.Short" Multiple="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.MovieGenre)" TValue="IReadOnlyList<MovieGenre>" TEnum="MovieGenre" @bind-SelectedValues="@profile.MovieGenre"
                             CssIcon="@FontAwesomeIcons.Film" LabelSize="LabelSize.Short" Multiple="true"></FieldSelect>
                    <FieldSelect For="@(() => profile.TVGenre)" TValue="IReadOnlyList<TVGenre>" TEnum="TVGenre" @bind-SelectedValues="@profile.TVGenre"
                             CssIcon="@FontAwesomeIcons.Tv" LabelSize="LabelSize.Short" Multiple="true" Order="(o => o.Name)"></FieldSelect>
                    <FieldSelect For="@(() => profile.ReadingGenre)" TValue="IReadOnlyList<ReadingGenre>" TEnum="ReadingGenre" @bind-SelectedValues="@profile.ReadingGenre"
                             CssIcon="@FontAwesomeIcons.BookReader" LabelSize="LabelSize.Short" Multiple="true"></FieldSelect>
                </Column>
            </Row>
        }
        else if (SelectedTab == Tabs.MyRelationship)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <Alert Visible="true" Color="Color.Secondary">
                        <AlertDescription>Vínculos existentes</AlertDescription>
                    </Alert>
                    <ListGroup>
                        <CustomVisibility NoData="!profile.Partners.Any()">
                            @foreach (var item in profile.Partners)
                            {
                                <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center">
                                    <Badge Color="Color.Secondary">@item.Email</Badge>
                                    @if (string.IsNullOrEmpty(item.Id))
                                    {
                                        <Badge Color="Color.Danger" Pill>Vínculo Inativo</Badge>
                                    }
                                    else
                                    {
                                        <Badge Color="Color.Success" Pill>Vínculo Ativo</Badge>
                                    }
                                    <Button Color="Color.Danger" Clicked="@(()=>{RemovePartner(item.Email);})" Float="Float.End" Size="Size.Small" title="Delete">
                                        <Blazorise.Icon Name="FontAwesomeIcons.Trash"></Blazorise.Icon>
                                    </Button>
                                </ListGroupItem>
                            }
                        </CustomVisibility>
                    </ListGroup>
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <Alert Visible="true" Color="Color.Secondary">
                        <AlertDescription>Convites</AlertDescription>
                    </Alert>
                    <FieldText For="@(() => partner.Email)" @bind-Value="@partner.Email" LabelSize="LabelSize.Normal" ButtomCssIcon="FontAwesomeIcons.PaperPlane"
                           ButtomClicked="@AddNewPartner"></FieldText>
                    <Divider DividerType="DividerType.TextContent" Text="ou" />
                    <ListGroup>
                        <CustomVisibility Loading="ProfileLoading" NoData="@(Invite == null || !Invite.Invites.Any())" CustomNoData="Não existem convites pendentes">
                            @foreach (var item in Invite?.Invites ?? new List<Invite>())
                            {
                                <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center">
                                    <Badge Color="Color.Secondary">@item.DtInvite.GetElapsedTime()</Badge>
                                    <Badge Color="Color.Secondary">@item.UserEmail</Badge>
                                    @if (item.Accepted)
                                    {
                                        <Badge Color="Color.Success" Pill>Convite aceito</Badge>
                                    }
                                    else
                                    {
                                        <Badge Color="Color.Danger" Pill>Convite não aceito</Badge>
                                    }
                                    <Div Float="Float.End">
                                        <Button Color="Color.Success" Clicked="@(()=>{AcceptInvite(item.UserId);})" Size="Size.Small" title="Aceitar">
                                            <Blazorise.Icon Name="FontAwesomeIcons.ThumbsUp"></Blazorise.Icon>
                                        </Button>
                                        <Button Color="Color.Danger" Clicked="@(()=>{AcceptInvite(item.UserId);})" Size="Size.Small" title="Rejeitar">
                                            <Blazorise.Icon Name="FontAwesomeIcons.ThumbsDown"></Blazorise.Icon>
                                        </Button>
                                    </Div>
                                </ListGroupItem>
                            }
                        </CustomVisibility>
                    </ListGroup>
                </Column>
            </Row>
        }

        <Button Type="ButtonType.Submit" Color="Color.Primary" Margin="Margin.Is2.OnY">
            <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon> Salvar
        </Button>
        <Div Float="Float.End" Margin="Margin.Is2.OnY">
            <Button Color="Color.Primary" Clicked="help.ShowModal">
                <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> Ajuda
            </Button>
            <Button Color="Color.Danger" Clicked="privacy.ShowModal">
                <Blazorise.Icon Name="FontAwesomeIcons.UserShield"></Blazorise.Icon> Privacidade
            </Button>
        </Div>
    </EditForm>

    <VerusDate.Web.Shared.modal.BasicModal @ref="@privacy" Title="Termos de privacidade">
        <ul style="margin-left: -10px;">
            <li>Pedimos que leia nosso '<a href="/Terms/pt" target="_blank">Termos de Uso</a>' para ficar ciente de como seus dados serão tratados;</li>
            <li>Seja honesto nas respostas dadas neste formulário. Todas as informações aqui contidas estão abertas a denúncias e poderão ser avaliadas;</li>
        </ul>
    </VerusDate.Web.Shared.modal.BasicModal>

    <VerusDate.Web.Shared.modal.BasicModal @ref="help" Title="Ajuda">
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Blazorise.Icon Name="FontAwesomeIcons.EyeSlash"></Blazorise.Icon> Este conteúdo é privado e não será exibido no seu perfil
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Blazorise.Icon Name="FontAwesomeIcons.Question"></Blazorise.Icon> Esta opção terá explicações de cada um dos itens disponíveis para escolha
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Blazorise.Icon Name="FontAwesomeIcons.Plus"></Blazorise.Icon> Esta opção abrirá um popup com múltiplas escolhas (juntamente com explicações, caso tenha)
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Blazorise.Icon Name="FontAwesomeIcons.MapMarkedAlt"></Blazorise.Icon> Esta opção solicitará localização para seu aparelho (precisa estar habilitada esta opção)
        </Paragraph>
    </VerusDate.Web.Shared.modal.BasicModal>
</CustomVisibility>

@code {
    private Shared.modal.BasicModal? privacy;
    private Shared.modal.BasicModal? help;

    private VerusDate.Shared.Model.InviteModel? Invite;

    private bool ProfileLoading;

    private enum Tabs
    {
        Basic,
        Bio,
        Lifestyle,
        Personality,
        Interests,
        MyRelationship
    }

    private Tabs SelectedTab = Tabs.Basic;

    private void ChangeOrder(Tabs tab)
    {
        SelectedTab = tab;
    }
}