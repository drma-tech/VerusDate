@page "/Support"
@attribute [Authorize]
@inherits PageCore<Support.Index>
@*@inject IModalService Modal*@

<Alert Color="Color.Secondary" Visible="true">
    <AlertDescription>
        <Blazorise.Link To="Terms/pt">Termos de Uso</Blazorise.Link> ▪ <Blazorise.Link To="Privacy/pt">Políticas de Privacidade</Blazorise.Link> ▪ <Blazorise.Link To="Faq">Dúvidas / Perguntas</Blazorise.Link>
    </AlertDescription>
</Alert>

<Alert Color="Color.Warning" Visible="true">
    <AlertDescription>
        Sugira aqui melhorias ou informe erros (os mais votados terão prioridades)
    </AlertDescription>
</Alert>

<Row Gutter="(8,0)">
    <Column ColumnSize="ColumnSize.Is12.Is6.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>
                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Smile"></Blazorise.Icon> @Resources.CardHeader.SupportImprovementSuggestions
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.End" Clicked="() => NewTicket.ShowModal(TicketType.FeatureRequest)">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Blazorise.Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row Gutter="(8,0)">
                    <Column ColumnSize="ColumnSize.Is12.Is6.OnFullHD">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusFeature">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsFeature.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsFeature"></CustomVisibility>
                }
                else
                {
                    <Row Gutter="(8,0)" Style="max-height: 330px; overflow: auto;">
                        @foreach (var item in GetTicketList(TicketType.FeatureRequest))
                        {
                            <Column ColumnSize="ColumnSize.Is12.Is6.OnFullHD" Margin="Margin.Is1.FromBottom">
                                <Card Style="background-color: #e2e3e5">
                                    <CardBody Padding="Padding.Is1">
                                        <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                            <MemoEdit Rows="2" Plaintext="true" Text="@item.Description.GetResume(60)" />
                                        </Paragraph>
                                        <Paragraph Margin="Margin.Is2.FromBottom">
                                            <Badge Color="Color.Secondary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item.DtInsert.Value.GetElapsedTime()</Badge>
                                            <br />
                                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.VoteYea"></Blazorise.Icon> @item.TotalVotes</Badge>
                                            @if (item.TicketStatus == TicketStatus.Published)
                                            {
                                                <Badge Color="Color.Success"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Progress)
                                            {
                                                <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Done)
                                            {
                                                <Badge Color="Color.Primary">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else //Declined
                                            {
                                                <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                                            }
                                            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="()=>Vote(item.Id)" Disabled="@anyVote(item.Id)">
                                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Check"></Blazorise.Icon> Votar
                                            </Button>
                                        </Paragraph>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is12.Is6.OnWidescreen">
        <Card Margin="Margin.Is3.FromBottom">
            <CardHeader>
                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Bug"></Blazorise.Icon> @Resources.CardHeader.SupportErrors
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.End" Clicked="() => NewTicket.ShowModal(TicketType.Bug)">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Blazorise.Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row Gutter="(8,0)">
                    <Column ColumnSize="ColumnSize.Is12.Is6.OnFullHD">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusBug">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsBug.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsBug"></CustomVisibility>
                }
                else
                {
                    <Row Gutter="(8,0)" Style="max-height: 330px; overflow: auto;">
                        @foreach (var item in GetTicketList(TicketType.Bug))
                        {
                            <Column ColumnSize="ColumnSize.Is12.Is6.OnFullHD" Margin="Margin.Is1.FromBottom">
                                <Card Style="background-color: #e2e3e5">
                                    <CardBody Padding="Padding.Is1">
                                        <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                            <MemoEdit Rows="2" Plaintext="true" Text="@item.Description.GetResume(60)" />
                                        </Paragraph>
                                        <Paragraph Margin="Margin.Is2.FromBottom">
                                            <Badge Color="Color.Secondary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item.DtInsert.Value.GetElapsedTime()</Badge>
                                            <br />
                                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.VoteYea"></Blazorise.Icon> @item.TotalVotes</Badge>
                                            @if (item.TicketStatus == TicketStatus.Published)
                                            {
                                                <Badge Color="Color.Success"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Progress)
                                            {
                                                <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Done)
                                            {
                                                <Badge Color="Color.Primary">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else
                                            {
                                                <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                                            }
                                            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="()=>Vote(item.Id)" Disabled="@anyVote(item.Id)">
                                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Check"></Blazorise.Icon> Votar
                                            </Button>
                                        </Paragraph>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
    </Column>
</Row>

<VerusDate.Web.Shared.modal.NewTicket @ref="NewTicket" Inserted="@(async()=>{await LoadData();StateHasChanged();})"></VerusDate.Web.Shared.modal.NewTicket>

@code {
    private List<TicketModel> tickets = new();
    private List<TicketVoteModel> myVotes = new();

    public TicketStatus? TicketStatusBug { get; set; }
    public TicketStatus? TicketStatusFeature { get; set; }

    private Shared.modal.NewTicket NewTicket;

    private VisibilityOptions OptionsBug => new VisibilityOptions()
        {
            Loading = tickets == null,
            NoData = (tickets != null && !GetTicketList(TicketType.Bug).Any())
        };

    private VisibilityOptions OptionsFeature => new VisibilityOptions()
        {
            Loading = tickets == null,
            NoData = (tickets != null && !GetTicketList(TicketType.FeatureRequest).Any())
        };

    protected override async Task LoadData()
    {
        tickets = await Http.Ticket_GetList(SessionStorage);
        myVotes = await Http.Ticket_GetMyVotes(SessionStorage);
    }

    private List<TicketModel> GetTicketList(TicketType ticketType)
    {
        if (ticketType == TicketType.Bug && TicketStatusBug.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusBug).OrderByDescending(o => o.DtInsert).ToList();
        else if (ticketType == TicketType.FeatureRequest && TicketStatusFeature.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusFeature).OrderByDescending(o => o.DtInsert).ToList();
        else
            return tickets.Where(w => w.TicketType == ticketType).OrderByDescending(o => o.DtInsert).ToList();
    }

    //async Task ShowModal(TicketType ticketType)
    //{
    //    NewTicket.ShowModal(ticketType);
    //    //var parameters = new ModalParameters();
    //    //parameters.Add(nameof(TicketType), ticketType);

    //    //var messageForm = Modal.Show<NewTicket>("Novo Ticket", parameters);
    //    //var result = await messageForm.Result;

    //    //if (!result.Cancelled)
    //    //{
    //    //    await Http.Ticket_Insert((VerusDate.Shared.Model.Support.Ticket)result.Data);
    //    //    tickets.Add((VerusDate.Shared.Model.Support.Ticket)result.Data);
    //    //}
    //}

    private async Task Vote(string IdTicket)
    {
        try
        {
            if (anyVote(IdTicket))
            {
                Toast.ShowError("", "Você já votou neste ticket");
            }
            else
            {
                var vote = new TicketVoteModel();
                vote.SetKey(IdTicket);

                await Http.Ticket_Vote(vote, SessionStorage, Toast);
                tickets.Single(s => s.Id == IdTicket).Vote();

                myVotes.Add(vote);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private bool anyVote(string IdTicket)
    {
        return myVotes.Any(a => a.Key == IdTicket & a.IdVotedUser == ComponenteUtils.IdUser);
    }
}