@page "/Support"
@attribute [Authorize]
@inherits PageCore<Support.Index>

<Alert Color="Color.Secondary" Visible="true">
    <AlertDescription>
        <Blazorise.Link To="Terms/pt">Termos de Uso</Blazorise.Link> ▪ <Blazorise.Link To="Privacy/pt">Políticas de Privacidade</Blazorise.Link> ▪ <Blazorise.Link To="Faq">Dúvidas / Perguntas</Blazorise.Link>
    </AlertDescription>
</Alert>

<Div Margin="Margin.Is2.OnY">
    <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Feedback)" Clicked="(() => ChangeOrder(Tabs.Feedback))">Feedback</Button>
    <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Roadmap)" Clicked="(() => ChangeOrder(Tabs.Roadmap))">Roadmap</Button>
    <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Announcements)" Clicked="(() => ChangeOrder(Tabs.Announcements))">Announcements</Button>
</Div>

@if (SelectedTab == Tabs.Feedback)
{
    <Row HorizontalGutter="8" VerticalGutter="0">
        <Column ColumnSize="ColumnSize.Is12">
            <Field Horizontal="true">
                <FieldBody ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
                    <Addons>
                        <Addon AddonType="AddonType.Start" VerticalAlignment="VerticalAlignment.Middle">
                            <Button Color="Color.Primary" Disabled="true">
                                <Blazorise.Icon Name="@FontAwesomeIcons.Filter"></Blazorise.Icon>
                            </Button>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <Select TValue="TicketType" @bind-SelectedValue="@TicketTypeSel">
                                @foreach (var item in EnumHelper.GetArray<TicketType>())
                                {
                                    <SelectItem Value="@item">@item.GetName()</SelectItem>
                                }
                            </Select>
                        </Addon>
                    </Addons>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <Button Color="Color.Primary" Disabled="true">
                                <Blazorise.Icon Name="@FontAwesomeIcons.Filter"></Blazorise.Icon>
                            </Button>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusSel">
                                <SelectItem></SelectItem>
                                @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                {
                                    <SelectItem Value="@item">@item.GetName()</SelectItem>
                                }
                            </Select>
                        </Addon>
                    </Addons>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <Button Color="Color.Primary" Disabled="true">
                                <Blazorise.Icon Name="@FontAwesomeIcons.SortAmountDown"></Blazorise.Icon>
                            </Button>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <Select TValue="Order" @bind-SelectedValue="@OrderSel">
                                @foreach (var item in EnumHelper.GetArray<Order>())
                                {
                                    <SelectItem Value="@item">@item.GetName()</SelectItem>
                                }
                            </Select>
                        </Addon>
                    </Addons>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
                    <Button Color="Color.Primary" Block="true" Clicked="ShowModal">
                        <Blazorise.Icon Name="@FontAwesomeIcons.Plus"></Blazorise.Icon> Novo
                    </Button>
                </FieldBody>
            </Field>
        </Column>
    </Row>
    <CustomVisibility Loading="Loading" NoData="!GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel).Any()">
        @foreach (var item in GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel))
        {
            <Row>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Div Style="width: 50px; height: 100px;" TextAlignment="TextAlignment.Center" TextWeight="TextWeight.Bold">
                        <Button Size=" Size.ExtraSmall" Margin="Margin.Is0" Color="Color.Primary" Block="true" Outline="true" Clicked="()=>Vote(item.Id)" Disabled="false">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleUp"></Blazorise.Icon>
                        </Button>
                        @item.TotalVotes
                        <Button Size="Size.ExtraSmall" Margin="Margin.Is0" Color="Color.Primary" Block="true" Outline="true" Clicked="()=>Vote(item.Id)" Disabled="false">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleDown"></Blazorise.Icon>
                        </Button>
                    </Div>
                </Column>
                <Column Margin="Margin.Is1.FromBottom">
                    <Paragraph Margin="Margin.Is2.FromBottom" TextAlignment="TextAlignment.Justified">
                        <Heading Size="HeadingSize.Is5">@item.Title</Heading>
                    </Paragraph>
                    <Paragraph Margin="Margin.Is2.FromBottom" TextAlignment="TextAlignment.Justified">
                        @item.Description.GetResume(150)
                    </Paragraph>
                    <Paragraph Margin="Margin.Is2.FromBottom">
                        <Badge Color="Color.Dark" Margin="Margin.Is1.FromEnd"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item?.DtInsert?.GetElapsedTime()</Badge>
                        <Badge Color="Color.Dark" Margin="Margin.Is2.FromEnd">@item.TicketType.GetName()</Badge>
                        @if (item.TicketStatus == TicketStatus.New)
                        {
                            <Badge Color="Color.Info"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                        }
                        else if (item.TicketStatus == TicketStatus.UnderConsideration)
                        {
                            <Badge Color="Color.Secondary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                        }
                        else if (item.TicketStatus == TicketStatus.Planned)
                        {
                            <Badge Color="Color.Primary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                        }
                        else if (item.TicketStatus == TicketStatus.Progress)
                        {
                            <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                        }
                        else if (item.TicketStatus == TicketStatus.Done)
                        {
                            <Badge Color="Color.Success">@item.TicketStatus.GetName()</Badge>
                        }
                        else //Declined
                        {
                            <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                        }
                    </Paragraph>
                </Column>
            </Row>
            @if (item != GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel).Last())
            {
                <Divider Margin="Margin.Is0.FromTop.Is2.FromBottom" />
            }
        }
    </CustomVisibility>
}
else if (SelectedTab == Tabs.Roadmap)
{
    <FeatureUnavailable></FeatureUnavailable>
    @*<CardDeck>
        <Card Background="Background.Secondary">
            <CardHeader TextWeight="TextWeight.Bold">@TicketStatus.UnderConsideration.GetName()</CardHeader>
            <CardBody>
                <CardText>
                    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Primary">
            <CardHeader TextWeight="TextWeight.Bold">@TicketStatus.Planned.GetName()</CardHeader>
            <CardBody>
                <CardText>
                    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Warning">
            <CardHeader TextWeight="TextWeight.Bold">@TicketStatus.Progress.GetName()</CardHeader>
            <CardBody>
                <CardText>
                    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Success">
            <CardHeader TextWeight="TextWeight.Bold">@TicketStatus.Done.GetName()</CardHeader>
            <CardBody>
                <CardText>
                    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
                </CardText>
            </CardBody>
        </Card>
    </CardDeck>*@
}
else if (SelectedTab == Tabs.Announcements)
{
    <FeatureUnavailable></FeatureUnavailable>
}

@code {
    private List<TicketModel> tickets = new();
    private List<TicketVoteModel> myVotes = new();

    private TicketType TicketTypeSel { get; set; } = TicketType.Improvement;
    private TicketStatus? TicketStatusSel { get; set; }
    private Order OrderSel { get; set; } = Order.Last;

    [Inject] public IModalService ModalService { get; set; } = default!;

    private bool Loading;

    private enum Tabs
    {
        Feedback,
        Roadmap,
        Announcements
    }

    private Tabs SelectedTab = Tabs.Feedback;

    private void ChangeOrder(Tabs tab)
    {
        SelectedTab = tab;
    }

    private enum Order
    {
        [Custom(Name = "Mais recentes")]
        Last,

        [Custom(Name = "Mais votados")]
        Voted
    }

    protected override async Task<bool> LoadData()
    {
        Loading = true;

        tickets = await Http.Ticket_GetList();
        myVotes = await Http.Ticket_GetMyVotes();

        Loading = false;

        return true;
    }

    private List<TicketModel> GetTicketList(TicketType ticketType, TicketStatus? ticketStatus, Order order)
    {
        IEnumerable<TicketModel> result;

        if (ticketStatus.HasValue)
            result = tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == ticketStatus);
        else
            result = tickets.Where(w => w.TicketType == ticketType);

        if (order == Order.Last)
            return result.OrderByDescending(o => o.DtInsert).ToList();
        else
            return result.OrderByDescending(o => o.TotalVotes).ToList();
    }

    public Task ShowModal()
    {
        return ModalService.Show<NewTicket>("",
                x =>
                {
                    x.Add(x => x.Inserted, new EventCallbackFactory().Create<bool>(this, LoadData));
                },
                new ModalInstanceOptions()
                    {
                        UseModalStructure = false,
                        Centered = true,
                        Size = ModalSize.Default,
                    });
    }

    private async Task Vote(string IdTicket)
    {
        try
        {
            if (anyVote(IdTicket))
            {
                await Toast.Error("Você já votou neste ticket");
            }
            else
            {
                var vote = new TicketVoteModel();
                vote.SetKey(IdTicket);

                await Http.Ticket_Vote(vote, Toast);
                tickets.Single(s => s.Id == IdTicket).Vote();

                myVotes.Add(vote);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private bool anyVote(string IdTicket)
    {
        return myVotes.Any(a => a.Key == IdTicket & a.IdVotedUser == ComponenteUtils.IdUser);
    }
}