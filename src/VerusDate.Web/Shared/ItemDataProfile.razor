@using System.Linq.Expressions;
@inherits ComponenteCore<ItemDataProfile<TValue>>
@typeparam TValue

@if (Values != null && Values.Any())
{
    foreach (var item in Values)
    {
        <Badge Color="@GetColor(item)" Pill="true" title="@GetDescription(item)" Style="@GetCursor(item)" @onclick="@(() => BadgeClick(item))">
            <Blazorise.Icon Name="@ClassIcon"></Blazorise.Icon> @GetValue(item)
            @if (!string.IsNullOrEmpty(GetDescription(item)))
            {
                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromStart"></Blazorise.Icon>
            }
        </Badge>
    }
}
else
{
    <Badge Color="@GetColor(Value)" Pill="true" title="@GetDescription(Value)" Style="@GetCursor(Value)" @onclick="@(() => BadgeClick(Value))">
        <Blazorise.Icon Name="@ClassIcon"></Blazorise.Icon> @GetValue(Value)
        @if (!string.IsNullOrEmpty(GetDescription(Value)))
        {
            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromStart"></Blazorise.Icon>
        }
    </Badge>
}

@code {
    [Parameter] public Expression<Func<object>> For { get; set; }
    [Parameter] public TValue Value { get; set; }
    [Parameter] public IReadOnlyList<TValue> Values { get; set; }
    [Parameter] public string ClassIcon { get; set; }
    [Parameter] public List<AffinityVM> Affinities { get; set; } = new();

    private string GetValue(TValue value)
    {
        if (value == null) return "Não Respondido";

        if (value is string resultS)
        {
            if (string.IsNullOrEmpty(resultS))
                return "Não Respondido";
            else
                return resultS;
        }
        else if (value is Enum resultE)
        {
            var result = resultE.GetName();

            if (string.IsNullOrEmpty(result))
                return "Não Respondido";
            else
                return result;
        }
        else
        {
            throw new InvalidOperationException("tipo inválido: " + value.GetType());
        }
    }

    private string GetDescription(TValue value)
    {
        if (value == null) return null;

        if (value is string resultS)
        {
            return null;
        }
        else if (value is Enum resultE)
        {
            return resultE.GetCustomAttribute().Description;
        }
        else
        {
            throw new InvalidOperationException("tipo inválido: " + value.GetType());
        }
    }

    private string GetCursor(TValue value)
    {
        if (value == null) return "cursor: default";

        if (value is string resultS)
        {
            return "cursor: default";
        }
        else if (value is Enum resultE)
        {
            if (string.IsNullOrEmpty(resultE.GetCustomAttribute().Description))
            {
                return "cursor: default";
            }
            else
            {
                return "cursor: help";
            }
        }
        else
        {
            throw new InvalidOperationException("tipo inválido: " + value.GetType());
        }
    }

    private Color GetColor(TValue value)
    {
        var fieldName = AttributeHelper.GetNameOf(For);

        if (!Affinities.Any(s => s.AttributeName == fieldName)) //se o atributo não está mapeado no affinity, fica neutro
        {
            return Color.Secondary;
        }
        else if (Affinities.Single(s => s.AttributeName == fieldName).HaveAffinity) //se está mapeado e tem affinity
        {
            if (value == null) return Color.Secondary;

            if (value is string resultS) //campo do tipo texto
            {
                return Color.Success;
            }
            else if (value is Enum resultE) //campo do tipo enum array
            {
                var affinity = Affinities.Single(s => s.AttributeName == fieldName);

                if (affinity.ArrayEnums != null && affinity.ArrayEnums.Any())
                {
                    if (affinity.ArrayEnums.Any(a => a == Convert.ToInt32(resultE)))
                    {
                        return Color.Success;
                    }
                    else
                    {
                        return Color.Secondary;
                    }
                }
                else
                {
                    return Color.Success;
                }
            }
            else
            {
                throw new InvalidOperationException("tipo inválido: " + value.GetType());
            }
        }
        else //se não mapeado ou não tem afinidade
        {
            return Color.Danger;
        }
    }

    private void BadgeClick(TValue Value)
    {
        if (!string.IsNullOrEmpty(GetDescription(Value)))
        {
            var content = (MarkupString)GetDescription(Value);
            RenderFragment fragment =@<div>@content</div>;
            Toast.ShowToast(Blazored.Toast.Services.ToastLevel.Info, fragment, For.GetCustomAttribute().Name + ": " + GetValue(Value));
        }
    }
}