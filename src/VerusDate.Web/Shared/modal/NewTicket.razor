@inherits ComponenteCore<NewTicket>
@inject HttpClient Http

<ModalHeader>
    <ModalTitle>Novo Ticket</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody>
    <EditForm Model="@Ticket" OnValidSubmit="SubmitForm">
        <FluentValidationValidator />
        <div class="form-group">
            <Select TValue="TicketType" @bind-SelectedValue="@TicketType">
                @foreach (var item in EnumHelper.GetArray<TicketType>())
                {
                    <SelectItem Value="@item">@item.GetName()</SelectItem>
                }
            </Select>
        </div>
        <div class="form-group">
            <TextEdit @bind-Text="@Ticket.Title" MaxLength="100" Placeholder="@CustomAttributeHelper.GetCustomAttribute(()=>Ticket.Title).Prompt"></TextEdit>
            <ValidationMessage For="@(()=>Ticket.Title)"></ValidationMessage>
        </div>
        <div class="form-group">
            <MemoEdit @bind-Text="@Ticket.Description" Rows="7" MaxLength="512" Placeholder="@CustomAttributeHelper.GetCustomAttribute(()=>Ticket.Description).Prompt"></MemoEdit>
            <ValidationMessage For="@(()=>Ticket.Description)"></ValidationMessage>
        </div>
        <Button Type="ButtonType.Submit" Color="Color.Primary">Salvar</Button>
        <Button Clicked="@ModalService.Hide" Color="Color.Secondary">Cancelar</Button>
        <Button Clicked="@ImportLastError" Color="Color.Danger" Float="Float.End" Disabled="(TicketType == TicketType.Improvement)">Importar último erro</Button>
    </EditForm>
</ModalBody>

@code {
    [Parameter] public TicketType TicketType { get; set; } = TicketType.BugReport;

    public TicketModel Ticket { get; set; } = new();
    [Parameter] public EventCallback<bool> Inserted { get; set; }

    [Inject] public IModalService ModalService { get; set; } = default!;

    private void ImportLastError()
    {
        if (TicketType == TicketType.BugReport && SessionStorage.ContainKey("LogErrosVD"))
        {
            var list = SessionStorage.GetItem<List<LogContainer>>("LogErrosVD");
            var log = list.LastOrDefault();

            if (log != null)
            {
                Ticket.Title = log.Message;
                Ticket.Description = System.Text.Json.JsonSerializer.Serialize(log);

                list.Remove(log);
                SessionStorage.SetItem("LogErrosVD", list);
            }
            else
            {
                Toast.Warning("No errors found");
            }
        }
        else
        {
            Toast.Warning("No errors found");
        }
    }

    public async Task SubmitForm()
    {
        try
        {
            Ticket.TicketType = TicketType;
            Ticket.TicketStatus = TicketStatus.New;
            Ticket.SetIds(ComponenteUtils.IdUser);

            await Http.Ticket_Insert(Ticket, Toast);

            Ticket = new();
            await ModalService.Hide();

            await Inserted.InvokeAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}