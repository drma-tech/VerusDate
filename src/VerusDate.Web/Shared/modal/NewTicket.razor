@inherits ComponenteCore<NewTicket>
@inject HttpClient Http

<Modal @ref="modal">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Novo Ticket</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <EditForm Model="@Ticket" OnValidSubmit="SubmitForm">
                <FluentValidationValidator />
                <div class="form-group">
                    <MemoEdit @bind-Text="@Ticket.Description" Rows="7" MaxLength="512" Placeholder="@CustomAttributeHelper.GetCustomAttribute(()=>Ticket.Description).Prompt"></MemoEdit>
                    <ValidationMessage For="@(()=>Ticket.Description)"></ValidationMessage>
                </div>
                <Button Type="ButtonType.Submit" Color="Color.Primary">Salvar</Button>
                <Button Clicked="@modal.Hide" Color="Color.Secondary">Cancelar</Button>
            </EditForm>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private Modal modal;
    private TicketType TicketType;

    public TicketModel Ticket { get; set; } = new();
    [Parameter] public EventCallback<bool> Inserted { get; set; }

    public void ShowModal(TicketType TicketType)
    {
        this.TicketType = TicketType;
        modal.Show();

        if (TicketType == TicketType.Bug)
        {
            Ticket.Description = System.Text.Json.JsonSerializer.Serialize(SessionStorage.GetItem<List<LogContainer>>("LogErrosVD"));
        }
    }

    public async Task SubmitForm()
    {
        try
        {
            Ticket.TicketType = TicketType;
            Ticket.TicketStatus = TicketStatus.Published;
            Ticket.SetIds(ComponenteUtils.IdUser);

            await Http.Ticket_Insert(Ticket, Toast);

            Ticket = new();
            await modal.Hide();

            await Inserted.InvokeAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}