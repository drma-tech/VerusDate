@using System.Linq.Expressions;
@typeparam TValue
@typeparam TEnum where TEnum : struct, Enum, IConvertible

@if (HasGroup)
{
    var previousGroup = "";
    @foreach (var item in EnumHelper.GetList<TEnum>().OrderBy(o => o.Value))
    {
        if (!string.IsNullOrEmpty(@item.Group) && previousGroup != @item.Group)
        {
            <Alert Visible="true" Color="Color.Info" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom">
                <AlertMessage>@item.Group</AlertMessage>
            </Alert>
        }
        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is1.FromBottom">
            <Badge Color="Color.Primary">@item.Name</Badge>
            <FieldHelp Style="display: inline;">@item.Description</FieldHelp>
        </Paragraph>
        previousGroup = @item.Group;
    }
}
else
{
    @foreach (var item in EnumHelper.GetList<TEnum>())
    {
        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is1.FromBottom">
            <Badge Color="Color.Primary">@item.Name</Badge>
            <FieldHelp Style="display: inline;">@item.Description</FieldHelp>
        </Paragraph>
    }
}

@code {
    [Parameter] public bool HasGroup { get; set; }
}