@using System.Linq.Expressions;
@typeparam TValue
@typeparam TEnum where TEnum : struct, Enum, IConvertible

<ModalHeader>
    <ModalTitle>@Title</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (HasGroup)
    {
        var previousGroup = "";
        @foreach (var group in EnumHelper.GetList<TEnum>().DistinctBy(d => d.Group).Select(s => s.Group))
        {
            @foreach (var item in EnumHelper.GetList<TEnum>().Where(w => w.Group == group).OrderBy(Order))
            {
                if (!string.IsNullOrEmpty(@item.Group) && previousGroup != @item.Group)
                {
                    <Alert Visible="true" Color="Color.Info">
                        <AlertMessage>@item.Group</AlertMessage>
                    </Alert>
                }
                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                    <Check TValue="bool" Checked="Checked(item)" CheckedChanged="@(()=>CheckedChanged(item, !Checked(item)))" Size="Size.Medium">@item.Name</Check>
                    @if (!string.IsNullOrEmpty(@item.Description))
                    {
                        <FieldHelp>@item.Description</FieldHelp>
                    }
                </Paragraph>
                previousGroup = @item.Group;
            }
        }
    }
    else
    {
        @foreach (var item in EnumHelper.GetList<TEnum>().OrderBy(Order))
        {
            <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                <Check TValue="bool" Checked="Checked(item)" CheckedChanged="@(()=>CheckedChanged(item, !Checked(item)))" Size="Size.Medium">@item.Name</Check>
                @if (!string.IsNullOrEmpty(@item.Description))
                {
                    <FieldHelp>@item.Description</FieldHelp>
                }
            </Paragraph>
        }
    }
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@(async()=>{await ModalService.Hide();})">Cancelar</Button>
    <Button Color="Color.Primary" Clicked="@Confirmar">Confirmar</Button>
</ModalFooter>

@code {
    [Parameter] public bool HasGroup { get; set; }
    [Parameter] public Func<EnumObject, object> Order { get; set; } = o => o.Value;

    [Parameter] public IReadOnlyList<TEnum> SelectedValues { get; set; } = Array.Empty<TEnum>();
    [Parameter] public EventCallback<IReadOnlyList<TEnum>> SelectedValuesChanged { get; set; }

    [Parameter] public string Title { get; set; }

    [Inject] public IModalService ModalService { get; set; } = default!;

    private bool Checked(EnumObject item)
    {
        var result = SelectedValues?.Any(a => item.ValueObject.Equals(a));
        return result == null ? false : result.Value;
    }

    void CheckedChanged(EnumObject item, bool value)
    {
        if (value) //add
        {
            if (SelectedValues == null) SelectedValues = Array.Empty<TEnum>();
            SelectedValues = SelectedValues.ToArray().Concat(new TEnum[] { (TEnum)item.ValueObject }).ToList().AsReadOnly();
        }
        else //remove
        {
            var list = SelectedValues.ToList();
            list.Remove((TEnum)item.ValueObject);
            SelectedValues = list.AsReadOnly();
        }
    }

    private async Task Confirmar()
    {
        await SelectedValuesChanged.InvokeAsync(SelectedValues);

        await ModalService.Hide();
    }
}